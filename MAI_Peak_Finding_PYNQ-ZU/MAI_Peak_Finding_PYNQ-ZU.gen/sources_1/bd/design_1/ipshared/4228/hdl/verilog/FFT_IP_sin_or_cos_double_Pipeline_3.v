// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_IP_sin_or_cos_double_Pipeline_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_shift_V_3,
        c_0_05_reload,
        c_1_06_reload,
        c_2_07_reload,
        c_3_04_reload,
        shift_out,
        shift_out_ap_vld,
        in_shift_V_out,
        in_shift_V_out_ap_vld,
        shift_1_out,
        shift_1_out_ap_vld,
        r_V_8_out,
        r_V_8_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [62:0] in_shift_V_3;
input  [31:0] c_0_05_reload;
input  [31:0] c_1_06_reload;
input  [31:0] c_2_07_reload;
input  [31:0] c_3_04_reload;
output  [31:0] shift_out;
output   shift_out_ap_vld;
output  [61:0] in_shift_V_out;
output   in_shift_V_out_ap_vld;
output  [31:0] shift_1_out;
output   shift_1_out_ap_vld;
output  [61:0] r_V_8_out;
output   r_V_8_out_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg[31:0] shift_out;
reg shift_out_ap_vld;
reg in_shift_V_out_ap_vld;
reg shift_1_out_ap_vld;
reg r_V_8_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln453_fu_205_p2;
wire   [0:0] icmp_ln450_fu_161_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln450_reg_303;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] sh_assign_fu_177_p6;
reg   [31:0] sh_assign_reg_307;
reg   [0:0] isNeg_reg_313;
wire   [31:0] sub_ln1512_fu_199_p2;
reg   [31:0] sub_ln1512_reg_319;
reg   [0:0] icmp_ln453_reg_324;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_135_p4;
wire    ap_block_pp0_stage0;
reg   [62:0] in_shift_V_fu_62;
wire   [62:0] in_shift_V_2_fu_255_p3;
wire    ap_loop_init;
reg   [31:0] shift_fu_66;
wire   [31:0] shift_1_fu_228_p2;
wire   [31:0] shift_load_1_load_fu_277_p1;
reg   [2:0] i_fu_70;
wire   [2:0] add_ln450_fu_167_p2;
reg   [2:0] ap_sig_allocacmp_i_2;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] sh_assign_fu_177_p5;
wire   [31:0] ush_fu_234_p3;
wire   [62:0] zext_ln1488_fu_239_p1;
wire   [62:0] r_V_fu_243_p2;
wire   [62:0] r_V_1_fu_249_p2;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_88;
reg    ap_condition_243;
reg    ap_condition_246;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

FFT_IP_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U31(
    .din0(c_0_05_reload),
    .din1(c_1_06_reload),
    .din2(c_2_07_reload),
    .din3(c_3_04_reload),
    .din4(sh_assign_fu_177_p5),
    .dout(sh_assign_fu_177_p6)
);

FFT_IP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln453_reg_324 == 1'd0) | (icmp_ln450_reg_303 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_135_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_243)) begin
            i_fu_70 <= add_ln450_fu_167_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            in_shift_V_fu_62 <= in_shift_V_3;
        end else if ((1'b1 == ap_condition_246)) begin
            in_shift_V_fu_62 <= in_shift_V_2_fu_255_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            shift_fu_66 <= 32'd0;
        end else if ((1'b1 == ap_condition_246)) begin
            shift_fu_66 <= shift_1_fu_228_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln450_reg_303 <= icmp_ln450_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln450_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln453_reg_324 <= icmp_ln453_fu_205_p2;
        isNeg_reg_313 <= sh_assign_fu_177_p6[32'd31];
        sh_assign_reg_307 <= sh_assign_fu_177_p6;
        sub_ln1512_reg_319 <= sub_ln1512_fu_199_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln450_fu_161_p2 == 1'd1) | (icmp_ln453_fu_205_p2 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_88)) begin
        if (((icmp_ln453_reg_324 == 1'd0) & (icmp_ln450_reg_303 == 1'd0))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_135_p4 = 1'd0;
        end else if ((icmp_ln450_reg_303 == 1'd1)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_135_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_135_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_135_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln453_reg_324 == 1'd0) | (icmp_ln450_reg_303 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_135_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_70;
    end
end

always @ (*) begin
    if ((((icmp_ln453_reg_324 == 1'd0) & (icmp_ln450_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln450_reg_303 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        in_shift_V_out_ap_vld = 1'b1;
    end else begin
        in_shift_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln453_reg_324 == 1'd0) & (icmp_ln450_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_V_8_out_ap_vld = 1'b1;
    end else begin
        r_V_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln453_reg_324 == 1'd0) & (icmp_ln450_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_1_out_ap_vld = 1'b1;
    end else begin
        shift_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((icmp_ln450_reg_303 == 1'd1)) begin
            shift_out = shift_load_1_load_fu_277_p1;
        end else if (((icmp_ln453_reg_324 == 1'd0) & (icmp_ln450_reg_303 == 1'd0))) begin
            shift_out = shift_fu_66;
        end else begin
            shift_out = 'bx;
        end
    end else begin
        shift_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln453_reg_324 == 1'd0) & (icmp_ln450_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln450_reg_303 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        shift_out_ap_vld = 1'b1;
    end else begin
        shift_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln450_fu_167_p2 = (ap_sig_allocacmp_i_2 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_243 = ((icmp_ln450_fu_161_p2 == 1'd0) & (icmp_ln453_fu_205_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_246 = ((icmp_ln453_reg_324 == 1'd1) & (icmp_ln450_reg_303 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_88 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln450_fu_161_p2 = ((ap_sig_allocacmp_i_2 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln453_fu_205_p2 = ((sh_assign_fu_177_p6 == 32'd16) ? 1'b1 : 1'b0);

assign in_shift_V_2_fu_255_p3 = ((isNeg_reg_313[0:0] == 1'b1) ? r_V_fu_243_p2 : r_V_1_fu_249_p2);

assign in_shift_V_out = in_shift_V_fu_62[61:0];

assign r_V_1_fu_249_p2 = in_shift_V_fu_62 << zext_ln1488_fu_239_p1;

assign r_V_8_out = in_shift_V_2_fu_255_p3[61:0];

assign r_V_fu_243_p2 = $signed(in_shift_V_fu_62) >>> zext_ln1488_fu_239_p1;

assign sh_assign_fu_177_p5 = ap_sig_allocacmp_i_2[1:0];

assign shift_1_fu_228_p2 = (sh_assign_reg_307 + shift_fu_66);

assign shift_1_out = (sh_assign_reg_307 + shift_fu_66);

assign shift_load_1_load_fu_277_p1 = shift_fu_66;

assign sub_ln1512_fu_199_p2 = (32'd0 - sh_assign_fu_177_p6);

assign ush_fu_234_p3 = ((isNeg_reg_313[0:0] == 1'b1) ? sub_ln1512_reg_319 : sh_assign_reg_307);

assign zext_ln1488_fu_239_p1 = ush_fu_234_p3;

endmodule //FFT_IP_sin_or_cos_double_Pipeline_3
