// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_IP_FFT_IP_Pipeline_VITIS_LOOP_97_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ExtVolDataIn_Addr_A,
        ExtVolDataIn_EN_A,
        ExtVolDataIn_WEN_A,
        ExtVolDataIn_Din_A,
        ExtVolDataIn_Dout_A,
        f_M_value_address0,
        f_M_value_ce0,
        f_M_value_we0,
        f_M_value_d0,
        f_M_value_1_address0,
        f_M_value_1_ce0,
        f_M_value_1_we0,
        f_M_value_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ExtVolDataIn_Addr_A;
output   ExtVolDataIn_EN_A;
output  [3:0] ExtVolDataIn_WEN_A;
output  [31:0] ExtVolDataIn_Din_A;
input  [31:0] ExtVolDataIn_Dout_A;
output  [12:0] f_M_value_address0;
output   f_M_value_ce0;
output   f_M_value_we0;
output  [31:0] f_M_value_d0;
output  [12:0] f_M_value_1_address0;
output   f_M_value_1_ce0;
output   f_M_value_1_we0;
output  [31:0] f_M_value_1_d0;

reg ap_idle;
reg ExtVolDataIn_EN_A;
reg f_M_value_ce0;
reg f_M_value_we0;
reg f_M_value_1_ce0;
reg f_M_value_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln97_fu_92_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] h_cast_fu_104_p1;
reg   [63:0] h_cast_reg_130;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [13:0] h_fu_40;
wire   [13:0] add_ln97_fu_98_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_h_1;
wire   [31:0] ExtVolDataIn_Addr_A_orig;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FFT_IP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln97_fu_92_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            h_fu_40 <= add_ln97_fu_98_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            h_fu_40 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_92_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_cast_reg_130[13 : 0] <= h_cast_fu_104_p1[13 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ExtVolDataIn_EN_A = 1'b1;
    end else begin
        ExtVolDataIn_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_92_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_h_1 = 14'd0;
    end else begin
        ap_sig_allocacmp_h_1 = h_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_M_value_1_ce0 = 1'b1;
    end else begin
        f_M_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln97_fu_92_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_M_value_1_we0 = 1'b1;
    end else begin
        f_M_value_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_M_value_ce0 = 1'b1;
    end else begin
        f_M_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_M_value_we0 = 1'b1;
    end else begin
        f_M_value_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ExtVolDataIn_Addr_A = ExtVolDataIn_Addr_A_orig << 32'd2;

assign ExtVolDataIn_Addr_A_orig = h_cast_fu_104_p1;

assign ExtVolDataIn_Din_A = 32'd0;

assign ExtVolDataIn_WEN_A = 4'd0;

assign add_ln97_fu_98_p2 = (ap_sig_allocacmp_h_1 + 14'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign f_M_value_1_address0 = h_cast_fu_104_p1;

assign f_M_value_1_d0 = 32'd0;

assign f_M_value_address0 = h_cast_reg_130;

assign f_M_value_d0 = ExtVolDataIn_Dout_A;

assign h_cast_fu_104_p1 = ap_sig_allocacmp_h_1;

assign icmp_ln97_fu_92_p2 = ((ap_sig_allocacmp_h_1 == 14'd8192) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    h_cast_reg_130[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //FFT_IP_FFT_IP_Pipeline_VITIS_LOOP_97_1
