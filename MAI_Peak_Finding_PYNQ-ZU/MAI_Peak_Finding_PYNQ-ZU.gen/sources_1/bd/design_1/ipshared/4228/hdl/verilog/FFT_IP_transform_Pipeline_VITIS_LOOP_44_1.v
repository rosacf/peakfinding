// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_IP_transform_Pipeline_VITIS_LOOP_44_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        f_0_address0,
        f_0_ce0,
        f_0_q0,
        f_1_address0,
        f_1_ce0,
        f_1_q0,
        f2_M_value_address0,
        f2_M_value_ce0,
        f2_M_value_we0,
        f2_M_value_d0,
        f2_M_value_1_address0,
        f2_M_value_1_ce0,
        f2_M_value_1_we0,
        f2_M_value_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] f_0_address0;
output   f_0_ce0;
input  [31:0] f_0_q0;
output  [12:0] f_1_address0;
output   f_1_ce0;
input  [31:0] f_1_q0;
output  [12:0] f2_M_value_address0;
output   f2_M_value_ce0;
output   f2_M_value_we0;
output  [31:0] f2_M_value_d0;
output  [12:0] f2_M_value_1_address0;
output   f2_M_value_1_ce0;
output   f2_M_value_1_we0;
output  [31:0] f2_M_value_1_d0;

reg ap_idle;
reg f_0_ce0;
reg f_1_ce0;
reg f2_M_value_ce0;
reg f2_M_value_we0;
reg f2_M_value_1_ce0;
reg f2_M_value_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln44_fu_152_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [13:0] i_reg_514;
wire    ap_block_pp0_stage0_11001;
reg   [13:0] i_reg_514_pp0_iter1_reg;
reg   [13:0] i_reg_514_pp0_iter2_reg;
wire   [3:0] select_ln33_2_fu_248_p3;
reg   [3:0] select_ln33_2_reg_532;
wire   [9:0] select_ln33_8_fu_413_p3;
reg   [9:0] select_ln33_8_reg_538;
wire   [63:0] zext_ln45_fu_496_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] i_3_cast14_fu_502_p1;
reg   [13:0] i_2_fu_86;
wire   [13:0] add_ln44_fu_158_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i;
wire   [0:0] tmp_fu_164_p3;
wire   [0:0] tmp_1_fu_176_p3;
wire   [1:0] select_ln34_fu_184_p3;
wire   [1:0] zext_ln33_fu_172_p1;
wire   [1:0] select_ln33_fu_192_p3;
wire   [0:0] tmp_2_fu_204_p3;
wire   [2:0] or_ln_fu_212_p3;
wire   [2:0] zext_ln33_1_fu_200_p1;
wire   [2:0] select_ln33_1_fu_220_p3;
wire   [0:0] tmp_3_fu_232_p3;
wire   [3:0] or_ln34_1_fu_240_p3;
wire   [3:0] zext_ln33_2_fu_228_p1;
wire   [0:0] tmp_4_fu_264_p3;
wire   [4:0] or_ln34_2_fu_271_p3;
wire   [4:0] zext_ln33_3_fu_261_p1;
wire   [4:0] select_ln33_3_fu_278_p3;
wire   [0:0] tmp_5_fu_290_p3;
wire   [5:0] or_ln34_3_fu_297_p3;
wire   [5:0] zext_ln33_4_fu_286_p1;
wire   [5:0] select_ln33_4_fu_305_p3;
wire   [0:0] tmp_6_fu_317_p3;
wire   [6:0] or_ln34_4_fu_324_p3;
wire   [6:0] zext_ln33_5_fu_313_p1;
wire   [6:0] select_ln33_5_fu_332_p3;
wire   [0:0] tmp_7_fu_344_p3;
wire   [7:0] or_ln34_5_fu_351_p3;
wire   [7:0] zext_ln33_6_fu_340_p1;
wire   [7:0] select_ln33_6_fu_359_p3;
wire   [0:0] tmp_8_fu_371_p3;
wire   [8:0] or_ln34_6_fu_378_p3;
wire   [8:0] zext_ln33_7_fu_367_p1;
wire   [8:0] select_ln33_7_fu_386_p3;
wire   [0:0] tmp_9_fu_398_p3;
wire   [9:0] or_ln34_7_fu_405_p3;
wire   [9:0] zext_ln33_8_fu_394_p1;
wire   [0:0] tmp_10_fu_427_p3;
wire   [10:0] or_ln34_8_fu_434_p3;
wire   [10:0] zext_ln33_9_fu_424_p1;
wire   [10:0] select_ln33_9_fu_441_p3;
wire   [0:0] tmp_11_fu_453_p3;
wire   [11:0] or_ln34_9_fu_460_p3;
wire   [11:0] zext_ln33_10_fu_449_p1;
wire   [11:0] select_ln33_10_fu_468_p3;
wire   [0:0] trunc_ln33_fu_421_p1;
wire   [12:0] or_ln34_s_fu_480_p3;
wire   [12:0] zext_ln33_11_fu_476_p1;
wire   [12:0] select_ln33_11_fu_488_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FFT_IP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln44_fu_152_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_86 <= add_ln44_fu_158_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_86 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_reg_514 <= ap_sig_allocacmp_i;
        i_reg_514_pp0_iter1_reg <= i_reg_514;
        select_ln33_8_reg_538 <= select_ln33_8_fu_413_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_reg_514_pp0_iter2_reg <= i_reg_514_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_152_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln33_2_reg_532 <= select_ln33_2_fu_248_p3;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_152_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 14'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        f2_M_value_1_ce0 = 1'b1;
    end else begin
        f2_M_value_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        f2_M_value_1_we0 = 1'b1;
    end else begin
        f2_M_value_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        f2_M_value_ce0 = 1'b1;
    end else begin
        f2_M_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        f2_M_value_we0 = 1'b1;
    end else begin
        f2_M_value_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f_0_ce0 = 1'b1;
    end else begin
        f_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        f_1_ce0 = 1'b1;
    end else begin
        f_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_fu_158_p2 = (ap_sig_allocacmp_i + 14'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign f2_M_value_1_address0 = i_3_cast14_fu_502_p1;

assign f2_M_value_1_d0 = f_1_q0;

assign f2_M_value_address0 = i_3_cast14_fu_502_p1;

assign f2_M_value_d0 = f_0_q0;

assign f_0_address0 = zext_ln45_fu_496_p1;

assign f_1_address0 = zext_ln45_fu_496_p1;

assign i_3_cast14_fu_502_p1 = i_reg_514_pp0_iter2_reg;

assign icmp_ln44_fu_152_p2 = ((ap_sig_allocacmp_i == 14'd8192) ? 1'b1 : 1'b0);

assign or_ln34_1_fu_240_p3 = {{1'd1}, {select_ln33_1_fu_220_p3}};

assign or_ln34_2_fu_271_p3 = {{1'd1}, {select_ln33_2_reg_532}};

assign or_ln34_3_fu_297_p3 = {{1'd1}, {select_ln33_3_fu_278_p3}};

assign or_ln34_4_fu_324_p3 = {{1'd1}, {select_ln33_4_fu_305_p3}};

assign or_ln34_5_fu_351_p3 = {{1'd1}, {select_ln33_5_fu_332_p3}};

assign or_ln34_6_fu_378_p3 = {{1'd1}, {select_ln33_6_fu_359_p3}};

assign or_ln34_7_fu_405_p3 = {{1'd1}, {select_ln33_7_fu_386_p3}};

assign or_ln34_8_fu_434_p3 = {{1'd1}, {select_ln33_8_reg_538}};

assign or_ln34_9_fu_460_p3 = {{1'd1}, {select_ln33_9_fu_441_p3}};

assign or_ln34_s_fu_480_p3 = {{1'd1}, {select_ln33_10_fu_468_p3}};

assign or_ln_fu_212_p3 = {{1'd1}, {select_ln33_fu_192_p3}};

assign select_ln33_10_fu_468_p3 = ((tmp_11_fu_453_p3[0:0] == 1'b1) ? or_ln34_9_fu_460_p3 : zext_ln33_10_fu_449_p1);

assign select_ln33_11_fu_488_p3 = ((trunc_ln33_fu_421_p1[0:0] == 1'b1) ? or_ln34_s_fu_480_p3 : zext_ln33_11_fu_476_p1);

assign select_ln33_1_fu_220_p3 = ((tmp_2_fu_204_p3[0:0] == 1'b1) ? or_ln_fu_212_p3 : zext_ln33_1_fu_200_p1);

assign select_ln33_2_fu_248_p3 = ((tmp_3_fu_232_p3[0:0] == 1'b1) ? or_ln34_1_fu_240_p3 : zext_ln33_2_fu_228_p1);

assign select_ln33_3_fu_278_p3 = ((tmp_4_fu_264_p3[0:0] == 1'b1) ? or_ln34_2_fu_271_p3 : zext_ln33_3_fu_261_p1);

assign select_ln33_4_fu_305_p3 = ((tmp_5_fu_290_p3[0:0] == 1'b1) ? or_ln34_3_fu_297_p3 : zext_ln33_4_fu_286_p1);

assign select_ln33_5_fu_332_p3 = ((tmp_6_fu_317_p3[0:0] == 1'b1) ? or_ln34_4_fu_324_p3 : zext_ln33_5_fu_313_p1);

assign select_ln33_6_fu_359_p3 = ((tmp_7_fu_344_p3[0:0] == 1'b1) ? or_ln34_5_fu_351_p3 : zext_ln33_6_fu_340_p1);

assign select_ln33_7_fu_386_p3 = ((tmp_8_fu_371_p3[0:0] == 1'b1) ? or_ln34_6_fu_378_p3 : zext_ln33_7_fu_367_p1);

assign select_ln33_8_fu_413_p3 = ((tmp_9_fu_398_p3[0:0] == 1'b1) ? or_ln34_7_fu_405_p3 : zext_ln33_8_fu_394_p1);

assign select_ln33_9_fu_441_p3 = ((tmp_10_fu_427_p3[0:0] == 1'b1) ? or_ln34_8_fu_434_p3 : zext_ln33_9_fu_424_p1);

assign select_ln33_fu_192_p3 = ((tmp_1_fu_176_p3[0:0] == 1'b1) ? select_ln34_fu_184_p3 : zext_ln33_fu_172_p1);

assign select_ln34_fu_184_p3 = ((tmp_fu_164_p3[0:0] == 1'b1) ? 2'd3 : 2'd2);

assign tmp_10_fu_427_p3 = i_reg_514_pp0_iter1_reg[32'd2];

assign tmp_11_fu_453_p3 = i_reg_514_pp0_iter1_reg[32'd1];

assign tmp_1_fu_176_p3 = ap_sig_allocacmp_i[32'd11];

assign tmp_2_fu_204_p3 = ap_sig_allocacmp_i[32'd10];

assign tmp_3_fu_232_p3 = ap_sig_allocacmp_i[32'd9];

assign tmp_4_fu_264_p3 = i_reg_514[32'd8];

assign tmp_5_fu_290_p3 = i_reg_514[32'd7];

assign tmp_6_fu_317_p3 = i_reg_514[32'd6];

assign tmp_7_fu_344_p3 = i_reg_514[32'd5];

assign tmp_8_fu_371_p3 = i_reg_514[32'd4];

assign tmp_9_fu_398_p3 = i_reg_514[32'd3];

assign tmp_fu_164_p3 = ap_sig_allocacmp_i[32'd12];

assign trunc_ln33_fu_421_p1 = i_reg_514_pp0_iter1_reg[0:0];

assign zext_ln33_10_fu_449_p1 = select_ln33_9_fu_441_p3;

assign zext_ln33_11_fu_476_p1 = select_ln33_10_fu_468_p3;

assign zext_ln33_1_fu_200_p1 = select_ln33_fu_192_p3;

assign zext_ln33_2_fu_228_p1 = select_ln33_1_fu_220_p3;

assign zext_ln33_3_fu_261_p1 = select_ln33_2_reg_532;

assign zext_ln33_4_fu_286_p1 = select_ln33_3_fu_278_p3;

assign zext_ln33_5_fu_313_p1 = select_ln33_4_fu_305_p3;

assign zext_ln33_6_fu_340_p1 = select_ln33_5_fu_332_p3;

assign zext_ln33_7_fu_367_p1 = select_ln33_6_fu_359_p3;

assign zext_ln33_8_fu_394_p1 = select_ln33_7_fu_386_p3;

assign zext_ln33_9_fu_424_p1 = select_ln33_8_reg_538;

assign zext_ln33_fu_172_p1 = tmp_fu_164_p3;

assign zext_ln45_fu_496_p1 = select_ln33_11_fu_488_p3;

endmodule //FFT_IP_transform_Pipeline_VITIS_LOOP_44_1
